---
import Layout from '../../layouts/Layout.astro';
import UnderButton from '../../components/UnderButton.astro';
import SuperBlock from '../../components/SuperBlock.astro';
import { getCollection } from "astro:content";
import BlogFilter from '../../components/BlogFilter.astro';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ç–∏–ø–∏–∑–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤
interface Post {
    data: {
        title: string;
        description: string;
        postType: string;
        pubDate: Date;
    };
    slug: string;
}
  
// –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ getCollection –∫ —Ç–∏–ø—É Post[]
const posts = (await getCollection("blog") as Post[]).sort(
  (a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf()
);

// –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø—ã, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º —Ñ–∏–ª—å—Ä–æ–≤–∞—Ç—å
const types = posts.map((p) => p.data.postType).flat()

// –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã
const uniqueTypes = [...new Set(types), "all"];

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã, –≤ –≤–∏–¥–µ 10.10.10 –≤–æ—Ç —Ç–∞–∫–æ–π –≤–æ—Ç —Ñ–æ—Ä–º–∞—Ç –¥–∞
function formatDate(date: Date): string {
  const day = String(date.getDate()).padStart(2, '0');
  const month = String(date.getMonth() + 1).padStart(2, '0');
  const year = String(date.getFullYear()).slice(-2);

  return `${day}.${month}.${year}`;
}
---

<Layout title="UltraGeoSite - Blog" description="This is the blog page. Thank you for being with me when I am alone.">
    <main class="main-container">
        <SuperBlock>
            <span slot="header">üìù Blog</span>
            Here you can find my posts and articles. Please, read them carefully and don't forget to <a href="/contacts" class="accent-link">contact me</a>
            if you have any questions. If you don't have any questions, please, <a href="/contacts" class="accent-link">contact me</a> too.
            Some of my posts were written in Russian, so don't be scared, cus i know that you may be confused because of that.
        </SuperBlock>
        <UnderButton text="To the very beginning *click*" href="/" />

        <div class="flex flex-wrap gap-1 justify-center items-center mt-[clamp(1rem,2vh+1vw,2rem)] 
            m-[clamp(1rem,2vh+1vw,2rem)_clamp(10px,4vh+2vw,30px)]" 
            id="tags" data-tags={uniqueTypes}>
            <p class="mr-2 text-responsive-small">Filter by type:</p>
            {uniqueTypes.map((artType) => <BlogFilter articleType={artType} />)}
        </div>
        

        {posts.map((post) => (
            <SuperBlock additionalInfo={post.data.postType}>
                <span slot="post-type"><span>{post.data.postType}</span> ‚Ä¢ {formatDate(post.data.pubDate)}</span>
                <span slot="small-header">{post.data.title}</span>
                <span>{post.data.description}</span>
                <p class="mt-3"><a href={`/blog/${post.slug}`} class="accent-link">Go to the post</a></p>
            </SuperBlock>
        ))}

    </main>
</Layout>

<style>
    main {
	  margin: auto;
	  padding: 1rem;
	  width: clamp(900px, 80%, 800px);
	  max-width: 100%;
	  color: white;
	  font-size: clamp(16px, 2vw + 1rem, 20px);
	  line-height: 1.6;
	}
</style>

<script>
    function filterPostsByAdditionalInfo(evt: MouseEvent) {
        const target = evt.currentTarget as HTMLElement;
        const selectedAdditionalInfo = target.getAttribute("data-type");

        const allPosts = document.querySelectorAll('.super-block[article-type]');

        // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –ø–æ—Å—Ç—ã
        allPosts.forEach((post) => {
            (post as HTMLElement).style.display = "none";
        });

        // –ï—Å–ª–∏ –∂–µ –≤—ã–±—Ä–∞–Ω—ã –≤—Å–µ –ø–æ—Å—Ç—ã —Ç–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ –≤—Å–µ –∏ –ø–æ–∫–∞–∂–µ–º
        if (selectedAdditionalInfo === "all") {
            allPosts.forEach((post) => {
                (post as HTMLElement).style.display = "flex";
            });
            return;
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –ø–æ—Å—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ç–∏–ø—É
        const filteredPosts = document.querySelectorAll(`.super-block[article-type="${selectedAdditionalInfo}"]`);
        filteredPosts.forEach((post) => {
            (post as HTMLElement).style.display = "flex";
        });
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    document.addEventListener("DOMContentLoaded", () => {
        const buttons = document.querySelectorAll("#tags .filter-button");
        buttons.forEach((button) => {
            button.addEventListener("click", filterPostsByAdditionalInfo);
        });
    });
</script>
  